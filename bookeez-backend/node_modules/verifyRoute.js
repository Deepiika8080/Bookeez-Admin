import express from "express"
import crypto from "crypto"
import twilio from "twilio";
import nodemailer from "nodemailer"
import dotenv from "dotenv"

dotenv.config()

const verifyRouter = express();
verifyRouter.use(express.json());

const transporter = nodemailer.createTransport({
  service: process.env.EMAIL_SERVICE,
  auth: {
    user: process.env.EMAIL_ID,
    pass: process.env.EMAIL_PASSWORD
  }
});


const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;

const client = twilio(accountSid, authToken)
const users = new Map();

const generateToken = () => {
  const token = crypto.randomInt(100000, 1000000).toString();

  return token
}
verifyRouter.post("/send-otp", async (req, res) => {
  const { method, contact } = req.body;

  if (!method) {
    return res.status(404).json({ error: "Method is required!" })
  }

  if (method === "phone") {
    const result = await client.verify.v2.services("VA751655c6c06ee4a2702c7d2234711115") // Verification service SID
      .verifications
      .create({ to: contact, channel: 'sms' })        // Send SMS
      .then(verification => console.log("otp verification ", verification));
  } else {
    transporter.verify((error, success) => {
      if (error) {
        console.log("Error:)", error)
      } else {
        console.log("Email transporter is ready!");
      }
    })

    if (!contact) {
      return res.status(400).json({ message: "Email is required!" });
    }

    const token = generateToken();

    users.set(contact, { token, verified: false })
    console.log("user", users);
    const verificationLink = `${process.env.BASE_URL}/validate-code?method=${method}&contact=${contact}`
    transporter.sendMail({
      from: process.env.EMAIL_ID,
      to: contact,
      subject: "Verify Your Email",
      html: `<p> Your verification code is ${token} Enter this code in our Website ${verificationLink} to activate your account`
    },
      (err, info) => {
        if (err) {
          console.log("error:", err);
          return res.status(500).json({ message: "Failed to send email.", error: err.message });
        }
        res.status(200).json({ message: "Verification email sent!" });
      }
    )
  }

  return;
});

verifyRouter.post("/verify-code", async (req, res) => {
  const { code, method, contact } = req.body;

  if (!code && !method && !contact) {
    return res.status(400).json({ error: "Code and method and contact are required!" });
  }

  if (method === "phone") {

    const verificationCheck = await client.verify.v2.services(process.env.TWILIO_VERIFY_SERVICE_ID)
      .verificationChecks.create({ to: contact, code });
    console.log("verificationCheck", verificationCheck)
    if (verificationCheck.status === "approved") {
      return res.status(200).json({ success: true, message: "Phone verification successful!" });
    } else {
      return res.status(400).json({ success: false, message: "Incorrect OTP for phone!" });
    }
  } else {
    console.log("users", users);
    const user = users.get(contact)
    console.log("user", user);
    if (code !== user.token) {
      return res.status(400).json({ message: "Invalid or expired token!" });
    }
    console.log("token", user.token , "code" , code);
    user.verified = true;
    users.set(contact, user);

    res.status(200).json({ message: "Email verified successfully!" });
  }
  return;
});

export default verifyRouter;